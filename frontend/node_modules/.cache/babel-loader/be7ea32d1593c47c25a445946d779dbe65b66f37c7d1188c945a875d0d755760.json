{"ast":null,"code":"import _objectSpread from\"/Users/paul/Praktikum/dev/react-mesto-api-full-gha/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _classCallCheck from\"/Users/paul/Praktikum/dev/react-mesto-api-full-gha/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/paul/Praktikum/dev/react-mesto-api-full-gha/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";// import { apiConfig } from \"./constants\";\n// class API {\n//   constructor(config) {\n//     this.headers = config.headers;\n//     this.baseUrl = config.baseUrl;\n//   }\n//   _checkResponseStatus(response) {\n//     if (response.ok) {\n//       return response.json();\n//     }\n//     return Promise.reject(`Error: ${response.status}`);\n//   }\n//   getUserInfo() {\n//     return fetch(`${this.baseUrl}/users/me`, {\n//       method: \"GET\",\n//       headers: this.headers,\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n//   editUserInfo(data) {\n//     return fetch(`${this.baseUrl}/users/me`, {\n//       method: \"PATCH\",\n//       headers: this.headers,\n//       body: JSON.stringify({\n//         name: data.name,\n//         about: data.about,\n//       }),\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n//   createCard(card) {\n//     return fetch(`${this.baseUrl}/cards`, {\n//       method: \"POST\",\n//       headers: this.headers,\n//       body: JSON.stringify(card),\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n//   deleteCard(id) {\n//     return fetch(`${this.baseUrl}/cards/${id}`, {\n//       method: \"DELETE\",\n//       headers: this.headers,\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n//   getCardsList() {\n//     return fetch(`${this.baseUrl}/cards`, {\n//       method: \"GET\",\n//       headers: this.headers,\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n//   changeLikeCardStatus(id, isLiked) {\n//     if (isLiked) {\n//       return fetch(`${this.baseUrl}/cards/${id}/likes`, {\n//         method: \"PUT\",\n//         headers: this.headers,\n//       }).then((res) => this._checkResponseStatus(res));\n//     }\n//     return fetch(`${this.baseUrl}/cards/${id}/likes`, {\n//       method: \"DELETE\",\n//       headers: this.headers,\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n//   updateAvatar(data) {\n//     return fetch(`${this.baseUrl}/users/me/avatar`, {\n//       method: \"PATCH\",\n//       headers: this.headers,\n//       body: JSON.stringify({\n//         avatar: data.avatar,\n//       }),\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n// }\n// export const api = new API(apiConfig);\nvar Api=/*#__PURE__*/function(){function Api(object){_classCallCheck(this,Api);this._baseUrl=object.baseUrl;this._headers=object.headers;}_createClass(Api,[{key:\"_createPromise\",value:function _createPromise(url,method,body){return fetch(\"\".concat(this._baseUrl).concat(url),{method:\"\".concat(method),headers:_objectSpread(_objectSpread({},this._headers),{},{authorization:\"Bearer \".concat(localStorage.getItem('jwt'))}),body:body}).then(function(res){if(res.ok){return res.json();}return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));});}},{key:\"getUserInfo\",value:function getUserInfo(){return this._createPromise('/users/me','GET');}},{key:\"editUserInfo\",value:function editUserInfo(data){return this._createPromise('/users/me','PATCH',JSON.stringify({name:\"\".concat(data.name),about:\"\".concat(data.about)}));}},{key:\"createCard\",value:function createCard(data){return this._createPromise('/cards','POST',JSON.stringify({name:\"\".concat(data.name),link:\"\".concat(data.link)}));}},{key:\"deleteCard\",value:function deleteCard(id){return this._createPromise('/cards/'+id,'DELETE');}},{key:\"getCardsList\",value:function getCardsList(){return this._createPromise('/cards','GET');}},{key:\"changeLikeCardStatus\",value:function changeLikeCardStatus(id,isLiked){if(isLiked){return this._createPromise('/cards/'+id+'/likes','PUT');}return this._createPromise('/cards/'+id+'/likes','DELETE');}},{key:\"updateAvatar\",value:function updateAvatar(data){return this._createPromise('/users/me/avatar','PATCH',JSON.stringify({avatar:\"\".concat(data.avatar)}));}}]);return Api;}();export{Api as default};export var api=new Api({baseUrl:'http://api.mesto-russia.nomoredomains.monster',headers:{'Content-Type':'application/json'}});","map":{"version":3,"names":["Api","object","_baseUrl","baseUrl","_headers","headers","url","method","body","fetch","authorization","localStorage","getItem","then","res","ok","json","Promise","reject","status","_createPromise","data","JSON","stringify","name","about","link","id","isLiked","avatar","api"],"sources":["/Users/paul/Praktikum/dev/react-mesto-api-full-gha/frontend/src/utils/API.js"],"sourcesContent":["// import { apiConfig } from \"./constants\";\n\n// class API {\n//   constructor(config) {\n//     this.headers = config.headers;\n//     this.baseUrl = config.baseUrl;\n//   }\n\n//   _checkResponseStatus(response) {\n//     if (response.ok) {\n//       return response.json();\n//     }\n//     return Promise.reject(`Error: ${response.status}`);\n//   }\n\n//   getUserInfo() {\n//     return fetch(`${this.baseUrl}/users/me`, {\n//       method: \"GET\",\n//       headers: this.headers,\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n\n//   editUserInfo(data) {\n//     return fetch(`${this.baseUrl}/users/me`, {\n//       method: \"PATCH\",\n//       headers: this.headers,\n//       body: JSON.stringify({\n//         name: data.name,\n//         about: data.about,\n//       }),\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n\n//   createCard(card) {\n//     return fetch(`${this.baseUrl}/cards`, {\n//       method: \"POST\",\n//       headers: this.headers,\n//       body: JSON.stringify(card),\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n\n//   deleteCard(id) {\n//     return fetch(`${this.baseUrl}/cards/${id}`, {\n//       method: \"DELETE\",\n//       headers: this.headers,\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n\n//   getCardsList() {\n//     return fetch(`${this.baseUrl}/cards`, {\n//       method: \"GET\",\n//       headers: this.headers,\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n\n//   changeLikeCardStatus(id, isLiked) {\n//     if (isLiked) {\n//       return fetch(`${this.baseUrl}/cards/${id}/likes`, {\n//         method: \"PUT\",\n//         headers: this.headers,\n//       }).then((res) => this._checkResponseStatus(res));\n//     }\n//     return fetch(`${this.baseUrl}/cards/${id}/likes`, {\n//       method: \"DELETE\",\n//       headers: this.headers,\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n\n//   updateAvatar(data) {\n//     return fetch(`${this.baseUrl}/users/me/avatar`, {\n//       method: \"PATCH\",\n//       headers: this.headers,\n//       body: JSON.stringify({\n//         avatar: data.avatar,\n//       }),\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n// }\n\n// export const api = new API(apiConfig);\n\nexport default class Api {\n  constructor(object) {\n    this._baseUrl = object.baseUrl;\n    this._headers = object.headers;\n  }\n\n  _createPromise(url, method, body) {\n    return fetch(`${this._baseUrl}${url}`, {\n      method: `${method}`,\n      headers: {...this._headers, authorization: `Bearer ${localStorage.getItem('jwt')}`},\n      body: body,\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  getUserInfo() {\n    return this._createPromise('/users/me', 'GET');\n  }\n  \n  editUserInfo(data) {\n    return this._createPromise(\n      '/users/me',\n      'PATCH',\n      JSON.stringify({\n        name: `${data.name}`,\n        about: `${data.about}`,\n      }),\n    );\n  }\n\n  createCard(data) {\n    return this._createPromise(\n      '/cards',\n      'POST',\n      JSON.stringify({\n        name: `${data.name}`,\n        link: `${data.link}`,\n      }),\n    );\n  }\n\n  deleteCard(id) {\n    return this._createPromise('/cards/' + id, 'DELETE');\n  }\n\n  getCardsList() {\n    return this._createPromise('/cards', 'GET');\n  }\n\n  changeLikeCardStatus(id, isLiked) {\n    if (isLiked) {\n      return this._createPromise('/cards/' + id + '/likes', 'PUT');\n    }\n    return this._createPromise('/cards/' + id + '/likes', 'DELETE');\n  }\n  \n  updateAvatar(data) {\n    return this._createPromise(\n      '/users/me/avatar',\n      'PATCH',\n      JSON.stringify({\n        avatar: `${data.avatar}`,\n      }),\n    );\n  }\n}\n\nexport const api = new Api({\n  baseUrl: 'http://api.mesto-russia.nomoredomains.monster',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}