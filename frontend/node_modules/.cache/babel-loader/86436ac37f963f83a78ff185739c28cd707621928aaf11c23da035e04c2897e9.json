{"ast":null,"code":"// import { apiConfig } from \"./constants\";\n\n// class API {\n//   constructor(config) {\n//     this.headers = config.headers;\n//     this.baseUrl = config.baseUrl;\n//   }\n\n//   _checkResponseStatus(response) {\n//     if (response.ok) {\n//       return response.json();\n//     }\n//     return Promise.reject(`Error: ${response.status}`);\n//   }\n\n//   getUserInfo() {\n//     return fetch(`${this.baseUrl}/users/me`, {\n//       method: \"GET\",\n//       headers: this.headers,\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n\n//   editUserInfo(data) {\n//     return fetch(`${this.baseUrl}/users/me`, {\n//       method: \"PATCH\",\n//       headers: this.headers,\n//       body: JSON.stringify({\n//         name: data.name,\n//         about: data.about,\n//       }),\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n\n//   createCard(card) {\n//     return fetch(`${this.baseUrl}/cards`, {\n//       method: \"POST\",\n//       headers: this.headers,\n//       body: JSON.stringify(card),\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n\n//   deleteCard(id) {\n//     return fetch(`${this.baseUrl}/cards/${id}`, {\n//       method: \"DELETE\",\n//       headers: this.headers,\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n\n//   getCardsList() {\n//     return fetch(`${this.baseUrl}/cards`, {\n//       method: \"GET\",\n//       headers: this.headers,\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n\n//   changeLikeCardStatus(id, isLiked) {\n//     if (isLiked) {\n//       return fetch(`${this.baseUrl}/cards/${id}/likes`, {\n//         method: \"PUT\",\n//         headers: this.headers,\n//       }).then((res) => this._checkResponseStatus(res));\n//     }\n//     return fetch(`${this.baseUrl}/cards/${id}/likes`, {\n//       method: \"DELETE\",\n//       headers: this.headers,\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n\n//   updateAvatar(data) {\n//     return fetch(`${this.baseUrl}/users/me/avatar`, {\n//       method: \"PATCH\",\n//       headers: this.headers,\n//       body: JSON.stringify({\n//         avatar: data.avatar,\n//       }),\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n// }\n\n// export const api = new API(apiConfig);\n\n// export default class Api {\n//   constructor(object) {\n//     this._baseUrl = object.baseUrl;\n//     this._headers = object.headers;\n//   }\n\n//   _createPromise(url, method, body) {\n//     return fetch(`${this._baseUrl}${url}`, {\n//       method: `${method}`,\n//       headers: {...this._headers, authorization: `Bearer ${localStorage.getItem('jwt')}`},\n//       body: body,\n//       credentials: 'include',\n//     }).then((res) => {\n//       if (res.ok) {\n//         return res.json();\n//       }\n//       return Promise.reject(`Ошибка: ${res.status}`);\n//     });\n//   }\n\nimport Cookies from 'js-cookie';\nexport default class Api {\n  constructor(object) {\n    this._baseUrl = object.baseUrl;\n    this._headers = object.headers;\n  }\n  _createPromise(url, method, body) {\n    console.log(\"Токен из кук:\", Cookies.get('jwt')); // Добавьте эту строку для вывода токена из кук\n    return fetch(`${this._baseUrl}${url}`, {\n      method: `${method}`,\n      headers: {\n        ...this._headers,\n        authorization: `Bearer ${Cookies.get('jwt')}`\n      },\n      body: body,\n      credentials: 'include'\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n  getUserInfo() {\n    return this._createPromise('/users/me', 'GET');\n  }\n  editUserInfo(data) {\n    return this._createPromise('/users/me', 'PATCH', JSON.stringify({\n      name: `${data.name}`,\n      about: `${data.about}`\n    }));\n  }\n  createCard(data) {\n    return this._createPromise('/cards', 'POST', JSON.stringify({\n      name: `${data.name}`,\n      link: `${data.link}`\n    }));\n  }\n  deleteCard(id) {\n    return this._createPromise('/cards/' + id, 'DELETE');\n  }\n  getCardsList() {\n    return this._createPromise('/cards', 'GET');\n  }\n  changeLikeCardStatus(id, isLiked) {\n    if (isLiked) {\n      return this._createPromise('/cards/' + id + '/likes', 'PUT');\n    }\n    return this._createPromise('/cards/' + id + '/likes', 'DELETE');\n  }\n  updateAvatar(data) {\n    return this._createPromise('/users/me/avatar', 'PATCH', JSON.stringify({\n      avatar: `${data.avatar}`\n    }));\n  }\n}\n\n// export const api = new Api({\n//   baseUrl: 'http://api.mesto-russia.nomoredomains.monster',\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n// });\n\nexport const api = new Api({\n  baseUrl: 'http://api.mesto-russia.nomoredomains.monster',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"names":["Cookies","Api","constructor","object","_baseUrl","baseUrl","_headers","headers","_createPromise","url","method","body","console","log","get","fetch","authorization","credentials","then","res","ok","json","Promise","reject","status","getUserInfo","editUserInfo","data","JSON","stringify","name","about","createCard","link","deleteCard","id","getCardsList","changeLikeCardStatus","isLiked","updateAvatar","avatar","api"],"sources":["/Users/paul/Praktikum/dev/react-mesto-api-full-gha/frontend/src/utils/API.js"],"sourcesContent":["// import { apiConfig } from \"./constants\";\n\n// class API {\n//   constructor(config) {\n//     this.headers = config.headers;\n//     this.baseUrl = config.baseUrl;\n//   }\n\n//   _checkResponseStatus(response) {\n//     if (response.ok) {\n//       return response.json();\n//     }\n//     return Promise.reject(`Error: ${response.status}`);\n//   }\n\n//   getUserInfo() {\n//     return fetch(`${this.baseUrl}/users/me`, {\n//       method: \"GET\",\n//       headers: this.headers,\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n\n//   editUserInfo(data) {\n//     return fetch(`${this.baseUrl}/users/me`, {\n//       method: \"PATCH\",\n//       headers: this.headers,\n//       body: JSON.stringify({\n//         name: data.name,\n//         about: data.about,\n//       }),\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n\n//   createCard(card) {\n//     return fetch(`${this.baseUrl}/cards`, {\n//       method: \"POST\",\n//       headers: this.headers,\n//       body: JSON.stringify(card),\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n\n//   deleteCard(id) {\n//     return fetch(`${this.baseUrl}/cards/${id}`, {\n//       method: \"DELETE\",\n//       headers: this.headers,\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n\n//   getCardsList() {\n//     return fetch(`${this.baseUrl}/cards`, {\n//       method: \"GET\",\n//       headers: this.headers,\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n\n//   changeLikeCardStatus(id, isLiked) {\n//     if (isLiked) {\n//       return fetch(`${this.baseUrl}/cards/${id}/likes`, {\n//         method: \"PUT\",\n//         headers: this.headers,\n//       }).then((res) => this._checkResponseStatus(res));\n//     }\n//     return fetch(`${this.baseUrl}/cards/${id}/likes`, {\n//       method: \"DELETE\",\n//       headers: this.headers,\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n\n//   updateAvatar(data) {\n//     return fetch(`${this.baseUrl}/users/me/avatar`, {\n//       method: \"PATCH\",\n//       headers: this.headers,\n//       body: JSON.stringify({\n//         avatar: data.avatar,\n//       }),\n//     }).then((res) => this._checkResponseStatus(res));\n//   }\n// }\n\n// export const api = new API(apiConfig);\n\n// export default class Api {\n//   constructor(object) {\n//     this._baseUrl = object.baseUrl;\n//     this._headers = object.headers;\n//   }\n\n//   _createPromise(url, method, body) {\n//     return fetch(`${this._baseUrl}${url}`, {\n//       method: `${method}`,\n//       headers: {...this._headers, authorization: `Bearer ${localStorage.getItem('jwt')}`},\n//       body: body,\n//       credentials: 'include',\n//     }).then((res) => {\n//       if (res.ok) {\n//         return res.json();\n//       }\n//       return Promise.reject(`Ошибка: ${res.status}`);\n//     });\n//   }\n\nimport Cookies from 'js-cookie';\n\nexport default class Api {\n  constructor(object) {\n    this._baseUrl = object.baseUrl;\n    this._headers = object.headers;\n  }\n\n  _createPromise(url, method, body) {\n    console.log(\"Токен из кук:\", Cookies.get('jwt')); // Добавьте эту строку для вывода токена из кук\n    return fetch(`${this._baseUrl}${url}`, {\n      method: `${method}`,\n      headers: {...this._headers, authorization: `Bearer ${Cookies.get('jwt')}`},\n      body: body,\n      credentials: 'include',\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n  \n  getUserInfo() {\n    return this._createPromise('/users/me', 'GET');\n  }\n  \n  editUserInfo(data) {\n    return this._createPromise(\n      '/users/me',\n      'PATCH',\n      JSON.stringify({\n        name: `${data.name}`,\n        about: `${data.about}`,\n      }),\n    );\n  }\n\n  createCard(data) {\n    return this._createPromise(\n      '/cards',\n      'POST',\n      JSON.stringify({\n        name: `${data.name}`,\n        link: `${data.link}`,\n      }),\n    );\n  }\n\n  deleteCard(id) {\n    return this._createPromise('/cards/' + id, 'DELETE');\n  }\n\n  getCardsList() {\n    return this._createPromise('/cards', 'GET');\n  }\n\n  changeLikeCardStatus(id, isLiked) {\n    if (isLiked) {\n      return this._createPromise('/cards/' + id + '/likes', 'PUT');\n    }\n    return this._createPromise('/cards/' + id + '/likes', 'DELETE');\n  }\n  \n  updateAvatar(data) {\n    return this._createPromise(\n      '/users/me/avatar',\n      'PATCH',\n      JSON.stringify({\n        avatar: `${data.avatar}`,\n      }),\n    );\n  }\n}\n\n// export const api = new Api({\n//   baseUrl: 'http://api.mesto-russia.nomoredomains.monster',\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n// });\n\nexport const api = new Api({\n  baseUrl: 'http://api.mesto-russia.nomoredomains.monster',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,OAAO,MAAM,WAAW;AAE/B,eAAe,MAAMC,GAAG,CAAC;EACvBC,WAAW,CAACC,MAAM,EAAE;IAClB,IAAI,CAACC,QAAQ,GAAGD,MAAM,CAACE,OAAO;IAC9B,IAAI,CAACC,QAAQ,GAAGH,MAAM,CAACI,OAAO;EAChC;EAEAC,cAAc,CAACC,GAAG,EAAEC,MAAM,EAAEC,IAAI,EAAE;IAChCC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEb,OAAO,CAACc,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAClD,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACX,QAAS,GAAEK,GAAI,EAAC,EAAE;MACrCC,MAAM,EAAG,GAAEA,MAAO,EAAC;MACnBH,OAAO,EAAE;QAAC,GAAG,IAAI,CAACD,QAAQ;QAAEU,aAAa,EAAG,UAAShB,OAAO,CAACc,GAAG,CAAC,KAAK,CAAE;MAAC,CAAC;MAC1EH,IAAI,EAAEA,IAAI;MACVM,WAAW,EAAE;IACf,CAAC,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAK;MACf,IAAIA,GAAG,CAACC,EAAE,EAAE;QACV,OAAOD,GAAG,CAACE,IAAI,EAAE;MACnB;MACA,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;IAChD,CAAC,CAAC;EACJ;EAEAC,WAAW,GAAG;IACZ,OAAO,IAAI,CAACjB,cAAc,CAAC,WAAW,EAAE,KAAK,CAAC;EAChD;EAEAkB,YAAY,CAACC,IAAI,EAAE;IACjB,OAAO,IAAI,CAACnB,cAAc,CACxB,WAAW,EACX,OAAO,EACPoB,IAAI,CAACC,SAAS,CAAC;MACbC,IAAI,EAAG,GAAEH,IAAI,CAACG,IAAK,EAAC;MACpBC,KAAK,EAAG,GAAEJ,IAAI,CAACI,KAAM;IACvB,CAAC,CAAC,CACH;EACH;EAEAC,UAAU,CAACL,IAAI,EAAE;IACf,OAAO,IAAI,CAACnB,cAAc,CACxB,QAAQ,EACR,MAAM,EACNoB,IAAI,CAACC,SAAS,CAAC;MACbC,IAAI,EAAG,GAAEH,IAAI,CAACG,IAAK,EAAC;MACpBG,IAAI,EAAG,GAAEN,IAAI,CAACM,IAAK;IACrB,CAAC,CAAC,CACH;EACH;EAEAC,UAAU,CAACC,EAAE,EAAE;IACb,OAAO,IAAI,CAAC3B,cAAc,CAAC,SAAS,GAAG2B,EAAE,EAAE,QAAQ,CAAC;EACtD;EAEAC,YAAY,GAAG;IACb,OAAO,IAAI,CAAC5B,cAAc,CAAC,QAAQ,EAAE,KAAK,CAAC;EAC7C;EAEA6B,oBAAoB,CAACF,EAAE,EAAEG,OAAO,EAAE;IAChC,IAAIA,OAAO,EAAE;MACX,OAAO,IAAI,CAAC9B,cAAc,CAAC,SAAS,GAAG2B,EAAE,GAAG,QAAQ,EAAE,KAAK,CAAC;IAC9D;IACA,OAAO,IAAI,CAAC3B,cAAc,CAAC,SAAS,GAAG2B,EAAE,GAAG,QAAQ,EAAE,QAAQ,CAAC;EACjE;EAEAI,YAAY,CAACZ,IAAI,EAAE;IACjB,OAAO,IAAI,CAACnB,cAAc,CACxB,kBAAkB,EAClB,OAAO,EACPoB,IAAI,CAACC,SAAS,CAAC;MACbW,MAAM,EAAG,GAAEb,IAAI,CAACa,MAAO;IACzB,CAAC,CAAC,CACH;EACH;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,GAAG,GAAG,IAAIxC,GAAG,CAAC;EACzBI,OAAO,EAAE,+CAA+C;EACxDE,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}