{"ast":null,"code":"import { apiConfig } from \"./constants\";\nclass API {\n  constructor(config) {\n    this.headers = config.headers;\n    this.baseUrl = config.baseUrl;\n  }\n  _checkResponseStatus(response) {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(`Error: ${response.status}`);\n  }\n  getUserInfo() {\n    return fetch(`${this.baseUrl}/users/me`, {\n      method: \"GET\",\n      headers: this.headers\n    }).then(res => this._checkResponseStatus(res));\n  }\n  editUserInfo(data) {\n    return fetch(`${this.baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(res => this._checkResponseStatus(res));\n  }\n  createCard(card) {\n    return fetch(`${this.baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this.headers,\n      body: JSON.stringify(card)\n    }).then(res => this._checkResponseStatus(res));\n  }\n  deleteCard(id) {\n    return fetch(`${this.baseUrl}/cards/${id}`, {\n      method: \"DELETE\",\n      headers: this.headers\n    }).then(res => this._checkResponseStatus(res));\n  }\n\n  // getCardsList() {\n  //   return fetch(`${this.baseUrl}/cards`, {\n  //     method: \"GET\",\n  //     headers: this.headers,\n  //   }).then((res) => this._checkResponseStatus(res));\n  // }\n\n  getCardsList() {\n    return fetch(`${this.baseUrl}/cards`, {\n      method: \"GET\",\n      headers: this.headers\n    }).then(res => this._checkResponseStatus(res)).then(cards => cards.map(card => ({\n      ...card,\n      likes: card.likes || []\n    })));\n  }\n  changeLikeCardStatus(id, isLiked) {\n    if (isLiked) {\n      return fetch(`${this.baseUrl}/cards/${id}/likes`, {\n        method: \"PUT\",\n        headers: this.headers\n      }).then(res => this._checkResponseStatus(res));\n    }\n    return fetch(`${this.baseUrl}/cards/${id}/likes`, {\n      method: \"DELETE\",\n      headers: this.headers\n    }).then(res => this._checkResponseStatus(res));\n  }\n  updateAvatar(data) {\n    return fetch(`${this.baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(res => this._checkResponseStatus(res));\n  }\n}\nexport const api = new API(apiConfig);","map":{"version":3,"names":["apiConfig","API","constructor","config","headers","baseUrl","_checkResponseStatus","response","ok","json","Promise","reject","status","getUserInfo","fetch","method","then","res","editUserInfo","data","body","JSON","stringify","name","about","createCard","card","deleteCard","id","getCardsList","cards","map","likes","changeLikeCardStatus","isLiked","updateAvatar","avatar","api"],"sources":["/Users/paul/Praktikum/dev/react-mesto-api-full-gha/frontend/src/utils/API.js"],"sourcesContent":["import { apiConfig } from \"./constants\";\n\nclass API {\n  constructor(config) {\n    this.headers = config.headers;\n    this.baseUrl = config.baseUrl;\n  }\n\n  _checkResponseStatus(response) {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(`Error: ${response.status}`);\n  }\n\n  getUserInfo() {\n    return fetch(`${this.baseUrl}/users/me`, {\n      method: \"GET\",\n      headers: this.headers,\n    }).then((res) => this._checkResponseStatus(res));\n  }\n\n  editUserInfo(data) {\n    return fetch(`${this.baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about,\n      }),\n    }).then((res) => this._checkResponseStatus(res));\n  }\n\n  createCard(card) {\n    return fetch(`${this.baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this.headers,\n      body: JSON.stringify(card),\n    }).then((res) => this._checkResponseStatus(res));\n  }\n\n  deleteCard(id) {\n    return fetch(`${this.baseUrl}/cards/${id}`, {\n      method: \"DELETE\",\n      headers: this.headers,\n    }).then((res) => this._checkResponseStatus(res));\n  }\n\n  // getCardsList() {\n  //   return fetch(`${this.baseUrl}/cards`, {\n  //     method: \"GET\",\n  //     headers: this.headers,\n  //   }).then((res) => this._checkResponseStatus(res));\n  // }\n\n  getCardsList() {\n    return fetch(`${this.baseUrl}/cards`, {\n      method: \"GET\",\n      headers: this.headers,\n    })\n      .then((res) => this._checkResponseStatus(res))\n      .then((cards) =>\n        cards.map((card) => ({\n          ...card,\n          likes: card.likes || [],\n        }))\n      );\n  }\n\n  changeLikeCardStatus(id, isLiked) {\n    if (isLiked) {\n      return fetch(`${this.baseUrl}/cards/${id}/likes`, {\n        method: \"PUT\",\n        headers: this.headers,\n      }).then((res) => this._checkResponseStatus(res));\n    }\n    return fetch(`${this.baseUrl}/cards/${id}/likes`, {\n      method: \"DELETE\",\n      headers: this.headers,\n    }).then((res) => this._checkResponseStatus(res));\n  }\n\n  updateAvatar(data) {\n    return fetch(`${this.baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: data.avatar,\n      }),\n    }).then((res) => this._checkResponseStatus(res));\n  }\n}\n\nexport const api = new API(apiConfig);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}